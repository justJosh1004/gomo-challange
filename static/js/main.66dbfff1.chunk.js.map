{"version":3,"sources":["components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","state","UVT","times","start","end","count","onChange","e","_this","setState","Object","objectSpread","defineProperty","target","name","value","handleSubmit","preventDefault","id","push","Number","console","log","renderTimeInput","react_default","a","createElement","Grid","centered","style","marginTop","marginBottom","Form","onSubmit","Field","width","Input","type","min","label","basic","content","labelPosition","placeholder","Button","inverted","color","minWidth","deleteTime","splice","findIndex","i","renderTimesList","List","animated","map","time","Item","key","Content","onClick","marginLeft","calculateUVT","UVTChunks","fixedUVT","sorted","tempUVT","length","checkGaps","sort","b","chunk","max","Math","apply","toConsumableArray","o","concat","getUVT","nextMin","overlapFix","_this2","this","Container","Divider","Component","App","className","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66dbfff1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Container,\r\n  Input,\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Divider,\r\n  List\r\n} from 'semantic-ui-react';\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    UVT: 0,\r\n    times: [],\r\n    start: 0,\r\n    end: 1,\r\n    count: 0\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ ...this.state, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    let id = this.state.count;\r\n\r\n    let times = this.state.times;\r\n    times.push({\r\n      start: Number(this.state.start),\r\n      end: Number(this.state.end),\r\n      id: id\r\n    });\r\n\r\n    this.setState({ ...this.state, count: id + 1 });\r\n\r\n    console.log(this.state);\r\n  };\r\n\r\n  renderTimeInput = () => {\r\n    return (\r\n      <Grid centered style={{ marginTop: '20px', marginBottom: '20px' }}>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Field style={{ width: '300px' }}>\r\n            <Input\r\n              name=\"start\"\r\n              value={this.state.start}\r\n              onChange={this.onChange}\r\n              type=\"number\"\r\n              min=\"0\"\r\n              label={{ basic: true, content: 'Start Time' }}\r\n              labelPosition=\"left\"\r\n              placeholder=\"Start time in milliseconds\"\r\n            />\r\n          </Form.Field>\r\n          <Form.Field style={{ width: '300px' }}>\r\n            <Input\r\n              name=\"end\"\r\n              value={this.state.end}\r\n              onChange={this.onChange}\r\n              type=\"number\"\r\n              min={this.state.start}\r\n              label={{ basic: true, content: 'End Time' }}\r\n              labelPosition=\"left\"\r\n              placeholder=\"End time in milliseconds\"\r\n            />\r\n          </Form.Field>\r\n          <Button\r\n            type=\"Submit\"\r\n            // onClick={() => this.addTime()}\r\n            inverted\r\n            color=\"green\"\r\n            style={{ minWidth: '200px' }}>\r\n            Add Time\r\n          </Button>\r\n        </Form>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  deleteTime = id => {\r\n    let times = this.state.times;\r\n\r\n    times.splice(\r\n      times.findIndex(i => {\r\n        return i.id === id;\r\n      }),\r\n      1\r\n    );\r\n\r\n    this.setState({ ...this.state, times: times });\r\n  };\r\n\r\n  renderTimesList = () => {\r\n    return (\r\n      <List animated>\r\n        {this.state.times.map(time => (\r\n          <List.Item key={time.id}>\r\n            <List.Content>\r\n              Start Time: {time.start}. End Time: {time.end}\r\n              <Button\r\n                onClick={() => this.deleteTime(time.id)}\r\n                inverted\r\n                color=\"red\"\r\n                style={{ marginLeft: '20px' }}>\r\n                Remove\r\n              </Button>\r\n            </List.Content>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n    );\r\n  };\r\n\r\n  // Calculations\r\n  calculateUVT = () => {\r\n    let sorted;\r\n    let UVTChunks = [];\r\n    let fixedUVT = [];\r\n    let UVT = 0;\r\n\r\n    // Take the time inputs and sort them in ascending order based on the start times\r\n    const sortTimes = times => {\r\n      return times.sort((a, b) => {\r\n        return a.start - b.start;\r\n      });\r\n    };\r\n\r\n    // Once sorted, check to see if there are any gaps\r\n    const checkGaps = sorted => {\r\n      let tempUVT = [];\r\n      sorted.map((time, i, sorted) => {\r\n        if (sorted[i + 1]) {\r\n          // Add times to temp array if there are no gaps\r\n          if (time.end > sorted[i + 1].start) {\r\n            tempUVT.push(time);\r\n          } else {\r\n            // If there is a gap, add the last time and add the temp array to UVTChunk\r\n            tempUVT.push(time);\r\n            UVTChunks.push(tempUVT);\r\n            tempUVT = []; // Clear temp array\r\n          }\r\n        }\r\n        // Add the final time\r\n        if (i === sorted.length - 1) {\r\n          tempUVT.push(time);\r\n          UVTChunks.push(tempUVT);\r\n        }\r\n      });\r\n    };\r\n\r\n    // Combine chunks that overlap\r\n    const overlapFix = UVTChunks => {\r\n      UVTChunks.map((chunk, i, UVTChunks) => {\r\n        let currentMax = 0;\r\n        let nextMin;\r\n        currentMax = Math.max(...chunk.map(o => o.end), 0);\r\n        nextMin = UVTChunks[i + 1]\r\n          ? Math.min(...UVTChunks[i + 1].map(o => o.start))\r\n          : null;\r\n\r\n        // Check if the current chuck max is greater than the next chunk's min\r\n        if (currentMax > nextMin && nextMin) {\r\n          // Combine chunks if they overlap\r\n          fixedUVT.push(chunk.concat(UVTChunks[i + 1]));\r\n          // Take out combined chunks from original\r\n          UVTChunks.splice(i, 2);\r\n        }\r\n      });\r\n      // Combine fixed chunks with updated array\r\n      return fixedUVT.concat(UVTChunks);\r\n    };\r\n\r\n    // Add the total number to get the UVT\r\n    const getUVT = UVTChunks => {\r\n      let UVT = 0;\r\n      UVTChunks.map(chunk => {\r\n        let max = 0;\r\n        let min = 0;\r\n        max = Math.max(...chunk.map(o => o.end), 0); // Get the latest ending time in the array\r\n        min = Math.min(...chunk.map(o => o.start)); // Get the earliest start time in the array\r\n        console.log(`Min: ${min}. Max: ${max}`);\r\n        UVT = UVT + (max - min);\r\n      });\r\n      return UVT;\r\n    };\r\n\r\n    sorted = sortTimes(this.state.times);\r\n\r\n    // calculateUVT(sorted);\r\n    checkGaps(sorted);\r\n    // console.log('UVT Array');\r\n    // console.log(UVTChunks);\r\n    let updatedUVT = overlapFix(UVTChunks);\r\n    // console.log('Updated UVT Array');\r\n    // console.log(updatedUVT);\r\n    // console.log(UVTChunks);\r\n    UVT = getUVT(updatedUVT);\r\n    console.log(UVT);\r\n\r\n    this.setState({ ...this.state, UVT: UVT });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h2>The UVT: {this.state.UVT}</h2>\r\n        <Button\r\n          onClick={() => this.calculateUVT()}\r\n          inverted\r\n          color=\"orange\"\r\n          style={{ marginTop: '20px' }}>\r\n          Calculate UVT\r\n        </Button>\r\n        <Divider />\r\n        {this.renderTimeInput()}\r\n        <Divider />\r\n        {this.renderTimesList()}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Divider } from 'semantic-ui-react';\r\n\r\nimport Main from './components/Main';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Gomo Video Challange</h1>\r\n        <Divider />\r\n        <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}